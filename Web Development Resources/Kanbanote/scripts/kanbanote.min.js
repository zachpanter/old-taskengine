var kanbanote = kanbanote || {};
kanbanote.kanbanoteApp = angular.module("kanbanoteApp", []), kanbanote.kanbanoteApp.config(["$interpolateProvider", function(t) {
    t.startSymbol("//"), t.endSymbol("//")
}]), kanbanote.kanbanoteApp.controller("boardController", ["$scope", "boardService", "$rootScope", "$sce", "$window", function(t, n, e, o, i) {
    t.columns = [], t.notes = [], t.notebooks = [], t.tags = [], e.isLoading = 0, t.formAddList = {}, t.formAddList.notebookGuid = 0, t.formAddList.tagGuid = 0, t.boards = [], t.defaultBoardId = null, t.noteLists = [], t.addNoteForm = [], t.formAddNote = {}, t.formEditNote = {}, t.formEditNote = {}, t.showAddList = !1, t.showEditList = [], t.formEditList = [], e.refreshBoard = function() {
        e.isLoading++, n.getBoards().then(function(n) {
            t.boards = n, t.defaultBoardId = n[0].id, e.isLoading--
        }, a), e.isLoading++, n.getNotesLists().then(function(n) {
            t.noteLists = n, e.isLoading--
        }, a), n.getNotesLists().then(function(o) {
            angular.forEach(o, function(o) {
                e.isLoading++, n.getNotes(o).then(function(n) {
                    t.notes[o.id] = n, e.isLoading--
                }, a)
            })
        }, a), e.isLoading++, n.getNotebooks().then(function(n) {
            t.notebooks = n, e.isLoading--
        }, a), e.isLoading++, n.getTags().then(function(n) {
            t.tags = n, e.isLoading--
        }, a)
    }, t.onDrop = function(o, i, r) {
        e.isLoading++;
        var d = {
            noteGuid: o,
            noteListfromId: i,
            noteListToId: r
        };
        if (i != r) {
            var u = t.notes[i].filter(function(t) {
                return t.guid == o
            });
            t.notes[i] = t.notes[i].filter(function(t) {
                return t.guid !== o
            }), t.notes[r] = t.notes[r].concat(u), t.$apply(), n.moveNote(d).then(function(t) {
                e.isLoading--
            }, a)
        }
    }, e.addListShowForm = function() {
        $("#modalZeroState").modal("hide"), t.showAddList = !0
    }, t.addListAction = function() {
        e.isLoading++, t.formAddList.boardId = t.defaultBoardId, t.showAddList = !1, n.addList(t.formAddList).then(function(o) {
            t.formAddList = {}, t.formAddList.notebookGuid = 0, t.formAddList.tagGuid = 0, n.getNotesLists(t.defaultBoardId).then(function(o) {
                t.noteLists = o;
                var i = t.noteLists[t.noteLists.length - 1],
                    r = t.noteLists[t.noteLists.length - 1].id;
                n.getNotes(i).then(function(n) {
                    t.notes[r] = n, e.isLoading--
                }, a)
            }, a)
        }, a)
    }, t.deleteList = function(o) {
        if (null != t.defaultBoardId) {
            e.isLoading++;
            var i = {
                listId: o,
                boardId: t.defaultBoardId
            };
            t.noteLists = t.noteLists.filter(function(t) {
                return t.id !== o
            }), n.deleteList(i).then(function(t) {
                e.isLoading--
            }, a)
        } else $("#modalError").modal("show")
    }, t.addNoteShowForm = function(n) {
        t.addNoteForm[n] = !0
    }, t.addNoteAction = function(o) {
        if (null != t.formAddNote[o].name) {
            e.isLoading++, t.formAddNote[o].listId = o, t.addNoteForm[o] = !1;
            var i = {
                title: t.formAddNote[o].name,
                guid: null
            };
            t.notes[o] = t.notes[o].concat(i), n.addNote(t.formAddNote[o]).then(function(n) {
                t.notes[o][t.notes[o].length - 1].guid = n, t.formAddNote[o] = {}, e.isLoading--
            }, a)
        }
    }, t.editNoteShowForm = function(i, r) {
        e.isLoading++;
        var d = t.notes[i].filter(function(t) {
                return t.guid == r
            }),
            u = o.trustAsHtml("Please wait, while loading"),
            s = "https://www.evernote.com/edit/" + r;
        t.formEditNote = {
            name: d[0].title,
            content: u,
            listId: i,
            url: s,
            noteGuid: r
        };
        var c = {
            noteGuid: r
        };
        n.getNote(c).then(function(n) {
            t.formEditNote.content = o.trustAsHtml(n), e.isLoading--
        }, a)
    }, t.editNoteAction = function() {
        e.isLoading++;
        var o = {
                noteGuid: t.formEditNote.noteGuid,
                title: t.formEditNote.name
            },
            i = t.formEditNote.listId,
            r = t.formEditNote.noteGuid;
        $("#modalEditNote").modal("hide");
        var d = t.notes[i].filter(function(t) {
            return t.guid == r
        });
        t.notes[i] = t.notes[i].filter(function(t) {
            return t.guid !== r
        }), d[0].title = t.formEditNote.name, t.notes[i] = d.concat(t.notes[i]), n.updateNote(o).then(function(t) {
            e.isLoading--
        }, a)
    }, t.editListShowForm = function(n) {
        t.showEditList[n] = !0;
        var e = t.noteLists.filter(function(t) {
            return t.id == n
        });
        t.formEditList[n] = {
            name: e[0].name,
            notebookGuid: e[0].notebookGuid,
            tagGuid: e[0].tagGuid,
            listId: n
        }
    }, t.editListAction = function(o) {
        n.updateList(t.formEditList[o]).then(function(n) {
            e.refreshBoard(), t.editListHideForm(o)
        }, a)
    }, t.editListHideForm = function(n) {
        t.showEditList[n] = !1
    }, t.toggleAnimation = function() {
        t.animationsEnabled = !t.animationsEnabled
    };
    var a = function(t) {
        e.isLoading = 0, t.data.code >= 7 && t.data.code <= 9 || 19 == t.data.code || 0 == t.data.code ? i.location.href = "/error/" + t.data.code : $("#modalError").modal("show")
    };
    e.refreshBoard()
}]), kanbanote.kanbanoteApp.controller("pollController", ["$scope", "$rootScope", "pollService", function(t, n, e) {
    n.formPollPremium = {}, n.formPollPremium.result = 5, n.thanksPollPremium = !1, n.showModalPollPremium = function() {
        $("#modalPollPremium").modal("show")
    }, n.votePollPremium = function() {
        n.isLoading++, n.thanksPollPremium = !0, e.votePremium(n.formPollPremium).then(function(t) {
            n.isLoading--
        }, o)
    };
    var o = function(t) {}
}]), kanbanote.kanbanoteApp.directive("noteDrag", function() {
    return {
        link: function(t, n, e) {
            var o = "";
            t.$watch(e.noteDrag, function(t) {
                o = t
            }), n.bind("dragstart", function(t) {
                var e = n.parent().parent().attr("id");
                t.originalEvent.dataTransfer.setData("Text", JSON.stringify(o)), t.originalEvent.dataTransfer.setData("Id", JSON.stringify(e))
            })
        }
    }
}), kanbanote.kanbanoteApp.directive("noteDrop", function() {
    return {
        link: function(t, n, e) {
            var o = e.noteDrop;
            cancel = function(t) {
                return t.preventDefault && t.preventDefault(), t.stopPropigation && t.stopPropigation(), !1
            }, n.bind("dragover", function(t) {
                cancel(t), t.originalEvent.dataTransfer.dropEffect = "move", n.addClass(o)
            }), n.bind("drop", function(e) {
                cancel(e), n.removeClass(o);
                var i = JSON.parse(e.originalEvent.dataTransfer.getData("Text")),
                    a = JSON.parse(e.originalEvent.dataTransfer.getData("Id")),
                    r = n.attr("id");
                t.onDrop(i.guid, a, r)
            }), n.bind("dragleave", function(t) {
                n.removeClass(o)
            })
        }
    }
}), kanbanote.kanbanoteApp.service("boardService", ["$http", "$q", "$rootScope", function(t, n, e) {
    var o = function() {
            return t.get("/api/get/notebooks").then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        i = function() {
            return t.get("/api/get/tags").then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        a = function() {
            return t({
                method: "POST",
                url: "/api/get/lists",
                data: $.param("default"),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        r = function(e) {
            return t({
                method: "POST",
                url: "/api/get/notes",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        d = function(e) {
            return t({
                method: "POST",
                url: "/api/get/note",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        u = function() {
            return t.get("/api/get/boards").then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        s = function(e) {
            return t({
                method: "POST",
                url: "/api/move/note",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        c = function(e) {
            return t({
                method: "POST",
                url: "/api/update/note",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        f = function(e) {
            return t({
                method: "POST",
                url: "/api/update/list",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        l = function(e) {
            return t({
                method: "POST",
                url: "/api/create/list",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        m = function(e) {
            return t({
                method: "POST",
                url: "/api/create/note",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        },
        p = function(e) {
            return t({
                method: "POST",
                url: "/api/delete/list",
                data: $.param(e),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            }).then(function(t) {
                return t.data
            }, function(t) {
                return n.reject(t)
            })
        };
    return {
        getNotesLists: a,
        getNotebooks: o,
        getNotes: r,
        getNote: d,
        getTags: i,
        getBoards: u,
        moveNote: s,
        updateNote: c,
        updateList: f,
        addList: l,
        addNote: m,
        deleteList: p
    }
}]), kanbanote.kanbanoteApp.service("pollService", ["$http", "$q", "$rootScope", function(t, n, e) {
    var o = function(e) {
        return t({
            method: "POST",
            url: "/api/vote/premium",
            data: $.param(e),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        }).then(function(t) {
            return t.data
        }, function(t) {
            return n.reject(t.data.Message)
        })
    };
    return {
        votePremium: o
    }
}]);